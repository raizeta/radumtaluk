<?php

namespace lukisongroup\programmer\controllers;

use Yii;
use lukisongroup\programmer\models\Proggresjob;
//use backend\models\User;
use lukisongroup\programmer\models\ProggresjobSearch;
use lukisongroup\programmer\models\Proggresjobdetail;


use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\helpers\Json;

/**
 * ProggresjobController implements the CRUD actions for Proggresjob model.
 */
class ProggresjobController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Proggresjob models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ProggresjobSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        // your default model and dataProvider generated by gii

    // validate if there is a editable input saved via AJAX
    if (Yii::$app->request->post('hasEditable')) {
        // instantiate your book model for saving
        $bookId = Yii::$app->request->post('editableKey');
        $model = Proggresjob::findOne($bookId);

        // store a default json response as desired by editable
        $out = Json::encode(['output'=>'', 'message'=>'']);

        // fetch the first entry in posted data (there should 
        // only be one entry anyway in this array for an 
        // editable submission)
        // - $posted is the posted data for Book without any indexes
        // - $post is the converted array for single model validation
        $post = [];
        $posted = current($_POST['Proggresjob']);
        $post['Proggresjob'] = $posted;

        // load model like any single model validation
        if ($model->load($post)) {
            // can save model or do something before saving model
            $model->save();

            // custom output to return to be displayed as the editable grid cell
            // data. Normally this is empty - whereby whatever value is edited by 
            // in the input by user is updated automatically.
            $output = '';

            // specific use case where you need to validate a specific
            // editable column posted when you have more than one 
            // EditableColumn in the grid view. We evaluate here a 
            // check to see if buy_amount was posted for the Book model
            if (isset($posted['buy_amount'])) {
               $output =  Yii::$app->formatter->asDecimal($model->buy_amount, 2);
            } 

            // similarly you can check if the name attribute was posted as well
            // if (isset($posted['name'])) {
            //   $output =  ''; // process as you need
            // } 
            $out = Json::encode(['output'=>$output, 'message'=>'']);
        } 
        // return ajax json encoded response and exit
        echo $out;
        return;
    }

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,

        ]);
    }

    /**
     * Displays a single Proggresjob model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {

        $model = new Proggresjob(); 
        $progressalldetail = Proggresjob::find()->progressalldetail($id);       
        $GetProgress = Proggresjob::find()->progressall($id);
        return $this->render('view', [
            'model' => $this->findModel($id),
             'GetAll' => $GetProgress,
             'progressalldetail'=>$progressalldetail,
             
        ]);
    }

    /**
     * Creates a new Proggresjob model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Proggresjob();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->proggres_id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Proggresjob model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->proggres_id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Proggresjob model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionDetailprogress()
    {
       
        $modelas = new ProggresjobDetail();
        //$model->load(Yii::$app->request->post());

        $ma = new Proggresjob();
        $ma->load(Yii::$app->request->post());

        $modelas->progress_id = $ma->proggres_id;
        
        $modelas->keterangan = $ma->keterangan_detail;
        $modelas->created_date = $ma->start_data;
       // $modelas->keterangan = $ma->keterangan_detail;

        $modelas->save(); 
//        echo $hsl->proggresjob->keterangan_detail;
     //   print_r($model);


        //return $this->redirect('index.php?r=proggresjob/view&id='.$ma->proggres_id);
        return $this->redirect('/it/proggresjob/view?id='.$ma->proggres_id);


    }

    /**
     * Finds the Proggresjob model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Proggresjob the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Proggresjob::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
